#!/usr/bin/env node

/**
  * Simple Command-Line Wrapper for the main Pitchfork Module (../index.js)
  */

var request = require('superagent')
  , exec = require('child_process').exec
  , q = require('q')
  , async = require('async')
  , _ = require('lodash')
  , prettyjson = require('prettyjson')
  , Pitchfork = require('../index');

// global constants
var USAGE = "usage: pitchfork [-hjTvVp] [-tx, --text] -a ARTIST_NAME -t ALBUM_TITLE";
var VERSION = require("../package").version;

function parse_args(args){

  function has_flags(flags, opts){
    return _.some(flags, function(flag){ 
        return args.indexOf(flag) != -1;
      });
  }

  // if the 1st argument is not a flag.
  if (!!args[2] && args[2][0] !== "-") {
    // it beocomes the artist
    var artist = args[2];
  } else {
    // find the value paired with the -a flag
    var artistIdx = args.indexOf("-a");
    if ( artistIdx != -1 ) {
      var artist = args[artistIdx+1]
    }
  }

  // if the 2nd argument is not a flag.
  if (!!args[3] && args[3][0] !== "-") {
    // it becomes the album
    var album = args[3]
  } else {
    // find the value paired with the -t flag
    var titleIdx = args.indexOf("-t");
    if ( titleIdx != -1 ) {
      var album = args[titleIdx+1]
    }
  }

  // if there's a page num
  if (has_flags(["-p"])) {
    // find the value paired with the -p flag
    var pageIdx = args.indexOf("-p");
    var pageNum = args[pageIdx+1];
  }

  return {
    artist: artist,
    album: album,
    json: has_flags(["-j","--json"]),
    verbose: has_flags(["-v", "--verbose"]),
    version: has_flags(["-V", "--version"]),
    truncated: has_flags(["-T","--truncated"]),
    justText: has_flags(["-tx", "--text"]),
    pageNum: pageNum || false,
  };
}



void function main(origArgs) {

  // variables;
  var opts = parse_args(origArgs);
  var artist = opts.artist || null;
  var album = opts.album || null;
  var json = opts.json || false;
  var verbose = opts.verbose || false;
  var version = opts.version || false;
  var truncated = opts.truncated || false;
  var justText = opts.justText;
  var pageNum = opts.pageNum || false;

  // if in "help mode"
  if (origArgs.indexOf("-h") != -1 || origArgs.length == 2) {
    // display usage
    console.log(USAGE);

  } else if (version) {
    console.log(VERSION);

  // if there's a page num
  } else if (pageNum) {
    search = new Pitchfork.Page(pageNum);
    search.promise.then(function () {
      if (search.results.length === 0) {
        console.log("Your search returned no results!  Please try a differnt query.");
        return;
      }
      var review = search.results[0];
      review.promise.then(function(){
        var output
          , printer;

        
        if (json) { printer = JSON.stringify; }
        if (truncated) { output = review.truncated(); }

        if (justText) {
          output = review.text_pretty_print();
          printer = function (o) { return o; };
        }
        
        output = output || review.attributes;
        printer = printer || prettyjson.render;

        var reviews = [];
        search.results.forEach(function (result) {
          var review;
          if (verbose) { review = result.verbose(); }
          else { review = result.truncated() }
          reviews.push(review);
        });
        // print a list of reviews
        console.log(printer(reviews));

      });
    })

  // if there's an artist and/or album
  } else if (artist || album) {
     search = new Pitchfork.Search(artist, album);
      search.promise.then(function () {
        if (search.results.length === 0) {
          console.log("Your search returned no results!  Please try a differnt query.");
          return;
        }
        var review = search.results[0];
        review.promise.then(function(){
          var output
            , printer;

          if (verbose) { output = review.verbose(); }
          if (json) { printer = JSON.stringify; }
          if (truncated) { output = review.truncated(); }

          if (justText) {
            output = review.text_pretty_print();
            printer = function (o) { return o; };
          }
          
          output = output || review.attributes;
          printer = printer || prettyjson.render;

          // if no album was specified...
          if (!album) {
            var reviews = [];
            search.results.forEach(function (result) {
              reviews.push(result.truncated());
            });
            // print a list of reviews
            console.log(printer(reviews));
          } else { console.log(printer(output)); }
        });
      });
  }
}(process.argv);